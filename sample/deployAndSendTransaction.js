const Web3 = require("web3");
const config = require('../config.json');
const web3 = new Web3(new Web3.providers.HttpProvider(config.rpcAddress));
const testContract = new web3.eth.Contract(
    [
        {
            "constant": true,
            "inputs": [],
            "name": "name",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "version",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_name",
                    "type": "string"
                },
                {
                    "name": "_version",
                    "type": "uint256"
                }
            ],
            "name": "set",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "name": "documentName",
                    "type": "string"
                },
                {
                    "indexed": false,
                    "name": "key",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "name",
                    "type": "string"
                },
                {
                    "indexed": false,
                    "name": "version",
                    "type": "uint256"
                }
            ],
            "name": "testEvent",
            "type": "event"
        }
    ], {
        from: '0x4368a0ae1c8011633324bad344d22474658c2655',
        gas: 4000000,
        data: "0x608060405234801561001057600080fd5b50610472806100206000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461005c57806354fd4d50146100ec5780638a42ebe914610117575b600080fd5b34801561006857600080fd5b506100716101a2565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100b1578082015181840152602081019050610096565b50505050905090810190601f1680156100de5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156100f857600080fd5b50610101610240565b6040518082815260200191505060405180910390f35b34801561012357600080fd5b50610188600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050610246565b604051808215151515815260200191505060405180910390f35b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102385780601f1061020d57610100808354040283529160200191610238565b820191906000526020600020905b81548152906001019060200180831161021b57829003601f168201915b505050505081565b60005481565b60008160008190555082600190805190602001906102659291906103a1565b507fd56fb87d7185bd9507d9c1e9cd868d387fd3bf4cba24f4314508d46823afe0d830600160005460405180806020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001848152602001838103835260048152602001807f71446f63000000000000000000000000000000000000000000000000000000008152506020018381038252858181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156103865780601f1061035b57610100808354040283529160200191610386565b820191906000526020600020905b81548152906001019060200180831161036957829003601f168201915b50509550505050505060405180910390a16001905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106103e257805160ff1916838001178555610410565b82800160010185558215610410579182015b8281111561040f5782518255916020019190600101906103f4565b5b50905061041d9190610421565b5090565b61044391905b8082111561043f576000816000905550600101610427565b5090565b905600a165627a7a72305820c681e7dc84283a6d627b8bf649c82969136a2c714ff082467555ae4967ea01680029",

    });
testContract.deploy({
    arguments: []
})
    .send({
        from: '0x4368a0ae1c8011633324bad344d22474658c2655',
        gas: 4000000
    })
    .then(async (instance) => {
        console.log(`Address: ${instance.options.address}`);
        try {
            let receipt = await instance.methods.set("123", 12).send({ from: '0x4368a0ae1c8011633324bad344d22474658c2655' });
            console.log('Receipt:', receipt);
        } catch (err) {
            console.log('Error')
        }
    });